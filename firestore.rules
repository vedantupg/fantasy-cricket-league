rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isLeagueAdmin(leagueId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/leagues/$(leagueId)) &&
             (get(/databases/$(database)/documents/leagues/$(leagueId)).data.creatorId == request.auth.uid ||
              request.auth.uid in get(/databases/$(database)/documents/leagues/$(leagueId)).data.adminIds);
    }
    
    function isLeagueParticipant(leagueId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/leagues/$(leagueId)) &&
             request.auth.uid in get(/databases/$(database)/documents/leagues/$(leagueId)).data.participants;
    }
    
    function isTournamentStarted(leagueId) {
      return exists(/databases/$(database)/documents/leagues/$(leagueId)) &&
             get(/databases/$(database)/documents/leagues/$(leagueId)).data.tournamentStarted == true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      // Users can only update their own profile, but NOT the isAdmin field
      allow update: if isOwner(userId) && 
                       (resource.data.isAdmin == request.resource.data.isAdmin);
      // Anyone can create their initial user document (during registration)
      allow create: if isAuthenticated();
      // Only admins can delete users or modify isAdmin field
      allow delete: if isAdmin();
    }

    // Leagues collection
    match /leagues/{leagueId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isLeagueAdmin(leagueId);
      allow delete: if isLeagueAdmin(leagueId);
    }

    // Squads collection
    match /squads/{squadId} {
      // Users can read their own squad
      // Users can read other squads only if tournament has started
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      isTournamentStarted(resource.data.leagueId));
      
      // Users can create/update their own squad (if not submitted and tournament not started)
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isLeagueAdmin(resource.data.leagueId)) &&
                       (!resource.data.isSubmitted || isLeagueAdmin(resource.data.leagueId));
      
      allow delete: if isLeagueAdmin(resource.data.leagueId);
    }

    // Players collection (read-only for users, write for admins)
    match /players/{playerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Transfers collection
    match /transfers/{transferId} {
      // Users can read transfers in their leagues
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      isLeagueAdmin(resource.data.leagueId));
      
      // Users can create transfer requests for themselves
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       isLeagueParticipant(request.resource.data.leagueId);
      
      // Only league admins can approve/reject transfers
      allow update: if isLeagueAdmin(resource.data.leagueId);
      
      allow delete: if isLeagueAdmin(resource.data.leagueId);
    }

    // Matches collection (read-only for users, write for admins)
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Player Performances collection (read-only for users, write for admins)
    match /playerPerformances/{performanceId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Points Configs collection (read-only for users, write for admins)
    match /pointsConfigs/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}